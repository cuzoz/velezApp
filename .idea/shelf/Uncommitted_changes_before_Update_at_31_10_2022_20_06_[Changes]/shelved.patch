Index: app/src/main/java/com/example/recview/viewmodels/buyTicket/ConfirmarCompraViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.recview.viewmodels.buyTicket\r\n\r\nimport android.content.ContentValues\r\nimport android.content.ContentValues.TAG\r\nimport android.util.Log\r\nimport androidx.lifecycle.ViewModel\r\nimport androidx.lifecycle.viewModelScope\r\nimport com.example.recview.entities.Partido\r\nimport com.example.recview.entities.Ticket\r\nimport com.google.firebase.firestore.ktx.firestore\r\nimport com.google.firebase.firestore.ktx.toObject\r\nimport com.google.firebase.ktx.Firebase\r\nimport kotlinx.coroutines.launch\r\nimport kotlinx.coroutines.tasks.await\r\n\r\nclass ConfirmarCompraViewModel : ViewModel() {\r\n\r\n    private val db = Firebase.firestore\r\n    private var miPartido : MutableList<Partido> = mutableListOf()\r\n    private var miTicket : MutableList<Ticket> = mutableListOf()\r\n\r\n    object DebitCardConstants {\r\n        const val DEBIT_CARD_LENGTH = 16\r\n        const val CVV_LENGTH = 3\r\n    }\r\n\r\n    //fun resultadoCompra(debitCardNumber: String, cvv: String): Boolean{\r\n        //hay que investigar tema fechas y su validación\r\n        //return validateCard(debitCardNumber, cvv)\r\n    //}\r\n\r\n    private fun validateCard(debitCardNumber: String, cvv: String): Boolean{\r\n\r\n        return validateDebitCardNumber(debitCardNumber) && validateCvv(cvv)\r\n    }\r\n\r\n    private fun validateDebitCardNumber(debitCardNumber: String) : Boolean{\r\n\r\n        return debitCardNumber.length == DebitCardConstants.DEBIT_CARD_LENGTH\r\n    }\r\n\r\n    private fun validateCvv(cvv: String) : Boolean{\r\n\r\n        return cvv.length == DebitCardConstants.CVV_LENGTH\r\n    }\r\n\r\n    private suspend fun checkDisponibilidad(partido: Partido, ticket: Ticket): Boolean{\r\n        var cantidad = 0\r\n        val partidosRef = db.collection(\"partidos\")\r\n        var resultado = false\r\n\r\n        try {\r\n            val partidos = partidosRef.whereEqualTo(\"id\",partido.id).get().await()\r\n\r\n            if (partidos != null) {\r\n                miPartido.clear()\r\n\r\n                for(document in partidos) {\r\n                    miPartido.add(document.toObject<Partido>())\r\n                    Log.d(\"Partido\", miPartido[0].toString())\r\n                }\r\n\r\n                if(ticket.idSector.equals(\"Norte\")){\r\n                    cantidad = miPartido[0].sectorNorte\r\n                }\r\n                else if(ticket.idSector.equals(\"Este\")){\r\n                    cantidad = miPartido[0].sectorEste\r\n                }\r\n                else if(ticket.idSector.equals(\"SurBaja\")){\r\n                    cantidad = miPartido[0].sectorSurBaja\r\n                }\r\n                else if(ticket.idSector.equals(\"SurAlta\")){\r\n                    cantidad = miPartido[0].sectorSurAlta\r\n                }\r\n                else if(ticket.idSector.equals(\"Oeste\")){\r\n                    cantidad = miPartido[0].sectorOeste\r\n                }\r\n                else {\r\n                    cantidad = miPartido[0].sectorVisitante\r\n                }\r\n            }\r\n\r\n            resultado = cantidad > 0\r\n        }catch (e : Exception){\r\n            Log.w(ContentValues.TAG, \"Error getting partido: \", e)\r\n        }\r\n\r\n        Log.d(\"CANTIDAD\", cantidad.toString())\r\n        return resultado\r\n    }\r\n\r\n    private suspend fun confirmarCompra(partido: Partido, ticket: Ticket){\r\n\r\n        //var partidoComprado = validarSiYaCompro(partido) //hay que agregar el usuario o el dni\r\n        crearTicket(ticket,partido)\r\n        val cantSector = descontarCantidadSector(partido, ticket)\r\n        val partidoID = obtenerPartidoID(partido,ticket)\r\n        restarSector(partidoID, cantSector)\r\n\r\n    }\r\n\r\n\r\n    // TODO: Hay que agregar el DNI del usuario logueado (cuando lo tengamos implementado)\r\n    suspend fun validarSiYaCompro(partido: Partido) : Boolean{\r\n        val ticketsRef = db.collection(\"tickets\")\r\n        var state : Boolean = false\r\n        miTicket.clear()\r\n\r\n        try {\r\n            val ticketsPartido = ticketsRef.whereEqualTo(\"idPartido\", partido.id).whereEqualTo(\"idUser\", 36397441).get().await()\r\n\r\n                for (document in ticketsPartido) {\r\n                    miTicket.add(document.toObject<Ticket>())\r\n                    Log.d(\"Ticket\", miTicket[0].toString())\r\n                }\r\n\r\n            if (miTicket.size > 0){\r\n                state = true\r\n                Log.d(\"Ya compro para este partido\", \"ya tiene un ticket adquirido\")\r\n            }\r\n        }catch (e: Exception){\r\n        Log.w(ContentValues.TAG, \"Error si ya compró ticket: \", e)\r\n    }\r\n    return state\r\n    }\r\n\r\n    private suspend fun restarSector(partidoID : String, cantSector : Partido){\r\n        val partidosRef = db.collection(\"partidos\")\r\n        val updatePartido = hashMapOf(\r\n            \"sectorEste\" to cantSector.sectorEste,\r\n            \"sectorNorte\" to cantSector.sectorNorte,\r\n            \"sectorOeste\" to cantSector.sectorOeste,\r\n            \"sectorSurAlta\" to cantSector.sectorSurAlta,\r\n            \"sectorSurBaja\" to cantSector.sectorSurBaja,\r\n            \"sectorvisitante\" to cantSector.sectorVisitante\r\n        )\r\n        try {\r\n            partidosRef.document(partidoID).update(updatePartido as Map<String, Any>)\r\n            Log.d(TAG, \"DocumentSnapshot successfully written!\")\r\n        }catch (e: Exception){\r\n            Log.w(TAG, \"Error writing document\", e)\r\n        }\r\n\r\n    }\r\n\r\n    private suspend fun crearTicket(ticket: Ticket, partido: Partido){\r\n\r\n        val nuevoTicket = hashMapOf(\r\n\r\n            \"equipo\" to \"Velez\",\r\n            \"idPartido\" to partido.id,\r\n            \"idUser\" to ticket.idUser,\r\n            \"idSector\" to ticket.idSector,\r\n            \"rival\" to ticket.rival,\r\n            \"titulo\" to ticket.titulo,\r\n            \"valor\" to ticket.valor\r\n        )\r\n        val ticketsRef = db.collection(\"tickets\")\r\n\r\n        try {\r\n            ticketsRef.add(nuevoTicket).await()\r\n            Log.d(TAG, \"DocumentSnapshot written\")\r\n        }catch (e: Exception) {\r\n            Log.w(TAG, \"Error adding document\", e)\r\n        }\r\n    }\r\n\r\n    private suspend fun obtenerPartidoID(partido: Partido, ticket: Ticket) : String{\r\n        var partidoID : String = \"\"\r\n        val partidosRef = db.collection(\"partidos\")\r\n        try {\r\n            val partido = partidosRef.whereEqualTo(\"id\",partido.id).get().await()\r\n            for (document in partido) {\r\n                Log.d(TAG, \"${document.id} => ${document.data}\")\r\n                partidoID = document.id\r\n            }\r\n        }catch (e: Exception){\r\n            Log.w(TAG, \"Error getting documents: \", e)\r\n        }\r\n        return partidoID\r\n    }\r\n\r\n    private suspend fun descontarCantidadSector(partido : Partido, ticket: Ticket) : Partido{\r\n\r\n        val partidosRef = db.collection(\"partidos\")\r\n        try {\r\n            val partidos = partidosRef.whereEqualTo(\"id\",partido.id).get().await()\r\n            Log.d(\"Partido\", miPartido[0].toString())\r\n            if (partidos != null) {\r\n                miPartido.clear()\r\n\r\n                for(document in partidos) {\r\n                    miPartido.add(document.toObject<Partido>())\r\n                    Log.d(\"Partido\", miPartido[0].toString())\r\n                }\r\n\r\n                if(ticket.idSector.equals(\"Norte\")){\r\n                    miPartido[0].sectorNorte = miPartido[0].sectorNorte - 1\r\n                }\r\n                else if(ticket.idSector.equals(\"Este\")){\r\n                    miPartido[0].sectorEste = miPartido[0].sectorEste - 1\r\n                }\r\n                else if(ticket.idSector.equals(\"SurBaja\")){\r\n                    miPartido[0].sectorSurBaja = miPartido[0].sectorSurBaja - 1\r\n                }\r\n                else if(ticket.idSector.equals(\"SurAlta\")){\r\n                    miPartido[0].sectorSurAlta = miPartido[0].sectorSurAlta - 1\r\n                }\r\n                else if(ticket.idSector.equals(\"Oeste\")){\r\n                    miPartido[0].sectorOeste = miPartido[0].sectorOeste - 1\r\n                }\r\n                else {\r\n                    miPartido[0].sectorVisitante = miPartido[0].sectorVisitante - 1\r\n                }\r\n            }\r\n\r\n        }catch (e: Exception){\r\n            Log.w(ContentValues.TAG, \"Error getting partido: \", e)\r\n        }\r\n        return miPartido[0]\r\n    }\r\n\r\n    fun comprar(debitCardNumber: String, cvv: String, partido: Partido, ticket: Ticket) : Boolean {\r\n        var rtdo = validateCard(debitCardNumber, cvv)\r\n        Log.d(\"RESULTADO_CARD\", rtdo.toString())\r\n\r\n        if(rtdo){\r\n\r\n            viewModelScope.launch {\r\n                rtdo = checkDisponibilidad(partido, ticket)\r\n                Log.d(\"RESULTADO_DISP\", rtdo.toString())\r\n\r\n                if(rtdo) {\r\n\r\n                    confirmarCompra(partido, ticket)\r\n                    Log.d(\"RESULTADO_COMPRA\", rtdo.toString())\r\n                }\r\n            }\r\n        }\r\n\r\n        return rtdo\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/recview/viewmodels/buyTicket/ConfirmarCompraViewModel.kt b/app/src/main/java/com/example/recview/viewmodels/buyTicket/ConfirmarCompraViewModel.kt
--- a/app/src/main/java/com/example/recview/viewmodels/buyTicket/ConfirmarCompraViewModel.kt	(revision 2cdcdf576d2551f2a3a63d651b88f176c1324803)
+++ b/app/src/main/java/com/example/recview/viewmodels/buyTicket/ConfirmarCompraViewModel.kt	(date 1667256996909)
@@ -101,7 +101,7 @@
 
 
     // TODO: Hay que agregar el DNI del usuario logueado (cuando lo tengamos implementado)
-    suspend fun validarSiYaCompro(partido: Partido) : Boolean{
+    private suspend fun validarSiYaCompro(partido: Partido) : Boolean{
         val ticketsRef = db.collection("tickets")
         var state : Boolean = false
         miTicket.clear()
@@ -227,17 +227,22 @@
         if(rtdo){
 
             viewModelScope.launch {
-                rtdo = checkDisponibilidad(partido, ticket)
-                Log.d("RESULTADO_DISP", rtdo.toString())
+                rtdo = !validarSiYaCompro(partido)
+
+                if(rtdo) {
+                    Log.d("RESULTADO_COMPRA", rtdo.toString())
+
+                    rtdo = checkDisponibilidad(partido, ticket)
+                    Log.d("RESULTADO_DISP", rtdo.toString())
 
-                if(rtdo) {
+                    if(rtdo) {
 
-                    confirmarCompra(partido, ticket)
-                    Log.d("RESULTADO_COMPRA", rtdo.toString())
+                        confirmarCompra(partido, ticket)
+                        Log.d("RESULTADO_COMPRA", rtdo.toString())
+                    }
                 }
             }
         }
-
         return rtdo
     }
 }
\ No newline at end of file
